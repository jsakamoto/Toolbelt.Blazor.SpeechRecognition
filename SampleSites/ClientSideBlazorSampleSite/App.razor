@using Toolbelt.Blazor.SpeechRecognition
@inject SpeechRecognition SpeechRecognition
@implements IDisposable

<button @onclick="OnClickStart" disabled="@(IsListening)">start</button>

<button @onclick="OnClickStop" disabled="@(!IsListening)">stop</button>

<div>
    @foreach (var result in this.Results)
    {
        if (result.IsFinal)
        {
            <text>@result.Items[0].Transcript</text>
        }
        else
        {
            <i style="color:#ddd;">@result.Items[0].Transcript</i>
        }
    }
</div>

@code {

    SpeechRecognitionResult[] Results = new SpeechRecognitionResult[0];

    bool IsListening = false;

    protected override void OnInitialized()
    {
        //this.SpeechRecognition.Lang = "ja-JP";
        this.SpeechRecognition.InterimResults = true;
        this.SpeechRecognition.Continuous = true;
        this.SpeechRecognition.Result += OnSpeechRecognized;
    }

    void OnSpeechRecognized(object sender, SpeechRecognitionEventArgs args)
    {
        this.Results = args.Results.Skip(args.ResultIndex).ToArray();
        this.StateHasChanged();
    }

    void OnClickStart()
    {
        if (!this.IsListening)
        {
            this.IsListening = true;
            this.SpeechRecognition.Start();
        }
    }

    void OnClickStop()
    {
        if (this.IsListening)
        {
            this.IsListening = false;
            this.SpeechRecognition.Stop();
        }
    }

    public void Dispose()
    {
        this.SpeechRecognition.Result -= OnSpeechRecognized;
    }
}
