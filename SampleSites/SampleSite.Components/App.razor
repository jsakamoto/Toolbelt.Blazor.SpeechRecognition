@using Toolbelt.Blazor.SpeechRecognition
@inject SpeechRecognition SpeechRecognition
@implements IDisposable

<div>
    SpeechRecognition API is @(_available ? "available" : "not available").
</div>

<div>
    <select @onchange="OnChangeLang" disabled="@(_isListening || !_available)">
        <option selected>en-US</option>
        <option>ja-JP</option>
    </select>
</div>

<button @onclick="OnClickStart" disabled="@(_isListening || !_available)">start</button>

<button @onclick="OnClickStop" disabled="@(!_isListening)">stop</button>

<div>
    @foreach (var result in this._results)
    {
        if (result.IsFinal)
        {
            <text>@result.Items[0].Transcript</text>
        }
        else
        {
            <i style="color:#ddd;">@result.Items[0].Transcript</i>
        }
    }
</div>

@code
{
    private SpeechRecognitionResult[] _results = Array.Empty<SpeechRecognitionResult>();

    private bool _available = true;

    private bool _isListening = false;

    protected override void OnInitialized()
    {
        this.SpeechRecognition.Lang = "en-US";
        this.SpeechRecognition.InterimResults = true;
        this.SpeechRecognition.Continuous = true;
        this.SpeechRecognition.Result += OnSpeechRecognized;
        this.SpeechRecognition.End += OnSpeechEnded;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this._available = await this.SpeechRecognition.IsAvailableAsync();
            this.StateHasChanged();
        }
    }

    private void OnChangeLang(ChangeEventArgs args)
    {
        this.SpeechRecognition.Lang = args.Value.ToString();
    }

    private void OnSpeechRecognized(object sender, SpeechRecognitionEventArgs args)
    {
        this._results = args.Results.Skip(args.ResultIndex).ToArray();
        this.StateHasChanged();
    }

    private async Task OnClickStart()
    {
        if (!this._isListening)
        {
            this._isListening = true;
            await this.SpeechRecognition.StartAsync();
        }
    }

    private async Task OnClickStop()
    {
        if (this._isListening)
        {
            this._isListening = false;
            await this.SpeechRecognition.StopAsync();
        }
    }

    private void OnSpeechEnded(object sender, EventArgs args)
    {
        if (this._isListening)
        {
            this._isListening = false;
            this.StateHasChanged();
        }
    }

    public void Dispose()
    {
        this.SpeechRecognition.Result -= OnSpeechRecognized;
        this.SpeechRecognition.End -= OnSpeechEnded;
    }
}
